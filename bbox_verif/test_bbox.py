#See LICENSE.iitm for license details
'''

Author   : Santhosh Pavan
Email id : santhosha@mindgrovetech.in
Details  : This file consists cocotb testbench for bbox dut

--------------------------------------------------------------------------------------------------
'''
'''
TODO:
Task Description: Add list of instructions in Testfactory block. So that testbench generates tests for listed instructions. One instruction is implemented as an example. 
		  For multiple instructions, provided as comment (see after TestFactory(TB)). Please the use the same format.
                  Note - Comments are provided for TestFactory.
		  Note - The value of instr (ANDN) is a temp value, it needed to be changed according to spec.

Note - Here testbench assumes below verilog port names are generated by bluespec compiler. Please implement the bluespec design with below port names.

 DUT Ports:
 Name                         I/O  size 
 bbox_out                       O    65/33
 CLK                            I     1 
 RST_N                          I     1 
 instr                          I    32
 rs1                            I    64/32
 rs2                            I    64/32
   (instr, rs1, rs2) -> bbox_out
'''

#Adding math library to generate log(XLEN)
import math
import string
import random
import cocotb
import logging as _log
from cocotb.decorators import coroutine
from cocotb.triggers import Timer, RisingEdge, FallingEdge
from cocotb.binary import BinaryValue
from cocotb.clock import Clock
from cocotb.regression import TestFactory

from bbox_ref_model import bbox_rm


#generates clock and reset
async def initial_setup(dut):
	cocotb.start_soon(Clock(dut.CLK, 1, units='ns').start())
        
	dut.RST_N.value = 0
	await RisingEdge(dut.CLK)
	dut.RST_N.value = 1


#drives input data to dut
async def input_driver(dut, XLEN, instr, rs1, rs2, single_opd, immediate):
    #Computing log(XLEN)
    XLEN_log = int(math.log2(XLEN))  
    await RisingEdge(dut.CLK)
    dut.instr.value = instr
    dut.rs1.value = rs1
    dut._log.info("---------------- DUT Input Info -----------------------")
    #Printing needed values for different instructions
    if single_opd == 1:
        await RisingEdge(dut.CLK)
        dut._log.info("instr = %s  rs1 = %s ",hex(dut.instr.value), hex(dut.rs1.value))
    elif immediate == 1:
        await RisingEdge(dut.CLK)
        dut._log.info("instr = %s  rs1 = %s shamt = %s",hex(dut.instr.value), hex(dut.rs1.value), hex((instr >> 20) % 2**XLEN_log))   
    else :
        dut.rs2.value = rs2
        await RisingEdge(dut.CLK)
        dut._log.info("instr = %s  rs1 = %s rs2 = %s",hex(dut.instr.value), hex(dut.rs1.value), hex(dut.rs2.value))
    dut._log.info("-------------------------------------------------------")

#monitors dut output
async def output_monitor(dut):
    while True:
        await RisingEdge(dut.CLK)
        if(dut.bbox_out.value[0]): break

    dut_result = dut.bbox_out.value
    return dut_result

#compares output of dut and rm
async def scoreboard(dut, dut_result, rm_result):
    dut._log.info("------------ Compare DUT o/p & Ref Model o/p ----------")
    dut._log.info("Expected output  = %s", rm_result)
    dut._log.info("DUT output       = %s", dut_result)
    assert rm_result == str(dut_result),"Failed"
    dut._log.info("-------------------------------------------------------")

#Testbench
async def TB(dut, XLEN, instr, instr_name, single_opd, immediate, num_of_tests):
    XLEN_log = int(math.log2(XLEN))
    await initial_setup(dut)
    dut._log.info("*******************************************************")
    dut._log.info("------------- Test %r of RV%d starts --------------" %(instr_name,XLEN))
    dut._log.info("*******************************************************")
    for i in range (num_of_tests):
        rs1 = random.randint(0,(2**XLEN)-1) 
        rs2 = 0
        if(single_opd == 0 and immediate==1):
            shamt = (instr >> 20) % 2**XLEN_log
        elif(single_opd == 0 and immediate == 0):
            rs2 = random.randint(0, (2**XLEN)-1)
        rm_result = bbox_rm(instr, rs1, rs2, XLEN)
    
        await input_driver(dut, XLEN, instr, rs1, rs2, single_opd, immediate)
        dut_result = await output_monitor(dut)
    
        await scoreboard(dut, dut_result, rm_result)	
    dut._log.info("*******************************************************")
    dut._log.info("------------- Test %r of RV%d ends ----------------" %(instr_name,XLEN))
    dut._log.info("*******************************************************")

# generates sets of tests based on the different permutations of the possible arguments to the test function
tf = TestFactory(TB)

base = 'RV64'
#To run tests for RV32, change base = 'RV32'

#Number of test runs
No_of_tests = 2

bclri  = 0b01001000000000000001000000010011 
bexti  = 0b01001000000000000101000000010011
binvi  = 0b01101000000000000001000000010011
bseti  = 0b00101000000000000001000000010011
rori   = 0b01100000000000000101000000010011
roriw  = 0b01100000000000000101000000011011
slli_uw= 0b00001000000000000001000000011011

##generating instructions with random shamt value for XLEN=64
if(base == 'RV64'):
  XLEN_log = 6
  immediate_instr = []
  for i in range(0, No_of_tests):
    immediate_instr.append(bclri +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr.append(bexti +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr.append(binvi +(random.randint(0, 2**XLEN_log-1) << 20))	
    immediate_instr.append(bseti +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr.append(rori  +(random.randint(0, 2**XLEN_log-1) << 20)) 
    immediate_instr.append(roriw +(random.randint(0, 2**5-1) << 20)) #DOUBT!!!
    immediate_instr.append(slli_uw +(random.randint(0, 2**XLEN_log-1) << 20)) 
else:
  XLEN_log = 5
  immediate_instr_32 = []
  for i in range(0, No_of_tests):
    immediate_instr_32.append(bclri +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr_32.append(bexti +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr_32.append(binvi +(random.randint(0, 2**XLEN_log-1) << 20))	
    immediate_instr_32.append(bseti +(random.randint(0, 2**XLEN_log-1) << 20))
    immediate_instr_32.append(rori  +(random.randint(0, 2**XLEN_log-1) << 20)) 

#for i in range(0, num_of_tests):

    
#generates tests for instructions of RV32
if base == 'RV32':
    tf.add_option('XLEN', [32])
    tf.add_option(('instr','instr_name','single_opd', 'immediate'), 
    [(0b01000000000000000111000000110011, 'andn', 0, 0),          
     (0b01001000000000000001000000110011, 'bclr', 0, 0),
     (bclri +(random.randint(0, 2**XLEN_log-1) << 20), 'bclri', 0, 1),
     (0b01001000000000000101000000110011, 'bext', 0, 0),
     (bexti +(random.randint(0, 2**XLEN_log-1) << 20), 'bexti', 0, 1),
     (0b01101000000000000001000000110011, 'binv', 0, 0),
     (binvi+ (random.randint(0, 2**XLEN_log-1) << 20), 'binvi', 0, 1),
     (0b00101000000000000001000000110011, 'bset', 0, 0),
     (bseti +(random.randint(0, 2**XLEN_log-1) << 20), 'bseti', 0, 1),
     (0b00001010000000000001000000110011, 'clmul', 0, 0),
     (0b00001010000000000011000000110011, 'clmulh', 0, 0),
     (0b00001010000000000010000000110011, 'clmulr', 0, 0),
     (0b01100000000000000001000000010011, 'clz', 1, 0),
     (0b01100000001000000001000000010011, 'cpop', 1, 0),
     (0b01100000000100000001000000010011, 'ctz', 1, 0),
     (0b00001010000000000110000000110011, 'max', 0, 0),
     (0b00001010000000000111000000110011, 'maxu', 0, 0),
     (0b00001010000000000100000000110011, 'min', 0, 0),
     (0b00001010000000000101000000110011, 'minu', 0, 0),
     (0b00101000011100000101000000010011, 'orc_b', 1, 0),
     (0b01000000000000000110000000110011, 'orn', 0, 0),
     (0b01101001100000000101000000010011, 'rev8', 1, 0),
     (0b01100000000000000001000000110011, 'rol', 0, 0),
     (0b01100000000000000101000000110011, 'ror', 0, 0),
     (rori  +(random.randint(0, 2**XLEN_log-1) << 20), 'rori', 0, 1),
     (0b01100000010000000001000000010011, 'sext_b', 1, 0),
     (0b01100000010100000001000000010011, 'sext_h', 1, 0),
     (0b00100000000000000010000000110011, 'sh1add', 0, 0),
     (0b00100000000000000100000000110011, 'sh2add', 0, 0),
     (0b00100000000000000110000000110011, 'sh3add', 0, 0),
     (0b01000000000000000100000000110011, 'xnor', 0, 0),
     (0b00001000000000000100000000110011, 'zext_h', 1, 0)])
    #if instruction has single operand, provide single_opd = 1 (please see below line).
    ##To run multiple instr - tf.add_option(((('instr','instr_name','single_opd'), [(1, 'addn', 0),(2,'clz',1),(...)])

#generates tests for instructions of RV64
elif base == 'RV64':
    tf.add_option('XLEN', [64])
    tf.add_option(('instr','instr_name','single_opd', 'immediate'), 
    [(0b01000000000000000111000000110011, 'andn', 0, 0),          
     (0b00001000000000000000000000111011, 'add_uw', 0, 0), 
     (0b01001000000000000001000000110011, 'bclr', 0, 0),
     (bclri +(random.randint(0, 2**XLEN_log-1) << 20), 'bclri', 0, 1),
     (0b01001000000000000101000000110011, 'bext', 0, 0),
     (bexti +(random.randint(0, 2**XLEN_log-1) << 20), 'bexti', 0, 1),
     (0b01101000000000000001000000110011, 'binv', 0, 0),
     (binvi+ (random.randint(0, 2**XLEN_log-1) << 20), 'binvi', 0, 1),
     (0b00101000000000000001000000110011, 'bset', 0, 0),
     (bseti +(random.randint(0, 2**XLEN_log-1) << 20), 'bseti', 0, 1),
     (0b00001010000000000001000000110011, 'clmul', 0, 0),
     (0b00001010000000000011000000110011, 'clmulh', 0, 0),
     (0b00001010000000000010000000110011, 'clmulr', 0, 0),
     (0b01100000000000000001000000010011, 'clz', 1, 0),
     (0b01100000000000000001000000011011, 'clzw', 1, 0),
     (0b01100000001000000001000000010011, 'cpop', 1, 0),
     (0b01100000001000000001000000011011, 'cpopw', 1, 0),
     (0b01100000000100000001000000010011, 'ctz', 1, 0),
     (0b01100000000100000001000000011011, 'ctzw', 1, 0),
     (0b00001010000000000110000000110011, 'max', 0, 0),
     (0b00001010000000000111000000110011, 'maxu', 0, 0),
     (0b00001010000000000100000000110011, 'min', 0, 0),
     (0b00001010000000000101000000110011, 'minu', 0, 0),
     (0b00101000011100000101000000010011, 'orc_b', 1, 0),
     (0b01000000000000000110000000110011, 'orn', 0, 0),
     (0b01101011100000000101000000010011, 'rev8', 1, 0),
     (0b01100000000000000001000000110011, 'rol', 0, 0),
     (0b01100000000000000001000000111011, 'rolw', 0, 0),
     (0b01100000000000000101000000110011, 'ror', 0, 0),
     (rori  +(random.randint(0, 2**XLEN_log-1) << 20), 'rori', 0, 1),
     (roriw +(random.randint(0, 2**5-1) << 20), 'roriw', 0, 1),
     (0b01100000000000000101000000111011, 'rorw', 0, 0),
     (0b01100000010000000001000000010011, 'sext_b', 1, 0),
     (0b01100000010100000001000000010011, 'sext_h', 1, 0),
     (0b00100000000000000010000000110011, 'sh1add', 0, 0),
     (0b00100000000000000010000000111011, 'sh1add_uw', 0, 0),
     (0b00100000000000000100000000110011, 'sh2add', 0, 0),
     (0b00100000000000000100000000111011, 'sh2add_uw', 0, 0),
     (0b00100000000000000110000000110011, 'sh3add', 0, 0),
     (0b00100000000000000110000000111011, 'sh3add_uw', 0, 0),
     (slli_uw +(random.randint(0, 2**XLEN_log-1) << 20), 'slli_uw', 0, 1),
     (0b01000000000000000100000000110011, 'xnor', 0, 0),
     (0b00001000000000000100000000111011, 'zext_h', 1, 0)])

     
    #if instruction has single operand, provide single_opd = 1 (please see below line).#  
    #if instruction has single operand, provide single_opd = 1 (please see below line).
    ##To run multiple instr - tf.add_option(((('instr','instr_name','single_opd'), [(1, 'addn', 0),(2,'clz',1),(...)])

#for each instruction below line generates 10 test vectors, can change to different no.
tf.add_option('num_of_tests',[No_of_tests])
tf.generate_tests()

